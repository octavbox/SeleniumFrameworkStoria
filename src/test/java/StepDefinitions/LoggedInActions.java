package StepDefinitions;

import Configuration.Config;
import UtilityClasses.Hooks;
import WebPages.MainPage;
import WebPages.RoLoginPage;
import WebPages.RoRezultatePage;
import WebPages.SalvatAnunturiPage;
import io.cucumber.java.en.And;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.testng.Assert;

import java.util.Random;


public class LoggedInActions {
    WebDriver driver;
    private final Logger logger = LoggerFactory.getLogger(LoggedInActions.class);
    Random random;
    MainPage mainPage;
    RoLoginPage loginPage;
    RoRezultatePage roRezultatePage;
    SalvatAnunturiPage salvatAnunturiPage;
    Config config = new Config();
    int maxHearts; // Used in Scenario: User can Add and Remove items from Favourites

    public LoggedInActions() {
        driver = Hooks.getDriver();
        random = new Random();
        mainPage = new MainPage(driver);
        loginPage = new RoLoginPage(driver);
        roRezultatePage = new RoRezultatePage(driver);
        salvatAnunturiPage = new SalvatAnunturiPage(driver);

    }

    //<Background>
    @Given("the user is logged in")
    public void the_user_is_logged_in() throws InterruptedException {
        mainPage.pressContulMeu();
        loginPage.enterEmail(config.getProperty("username"));
        loginPage.enterPassword(config.getProperty("password"));
        loginPage.pressAutentificareButton();
        Assert.assertEquals(driver.getTitle(), "Intră în cont");
        logger.info("Logged in successfully");
        Thread.sleep(1000);
    }
    //</Background>


    //Scenario: User logs out of their account
    @When("the user clicks on User Menu button")
    public void the_user_clicks_on_User_Menu_button() {
        mainPage.pressUserMenu();
    }

    @And("the user clicks on Logout button")
    public void the_user_clicks_on_Logout_button() throws InterruptedException {
        mainPage.pressLogout();
        Thread.sleep(2000);
    }

    @Then("the user is logged out")
    public void the_user_is_logged_out() {
        logger.info("Checking if the 'Contul meu' button is now visible");
        Assert.assertTrue(driver.findElement(By.xpath("//div[2]/a[@data-cy=\"navbar-my-account-button\"]")).isDisplayed());
    }

    @And("the user is redirected to the homepage")
    public void the_user_is_redirected_to_the_homepage() {
        Assert.assertEquals(driver.getTitle(), "Storia.ro - anunțuri imobiliare pentru apartamente, case, terenuri");
    }


    //Scenario: User can Add and Remove items from Favourites
    @When("the user clicks on multiple Heart buttons")
    public void the_user_clicks_on_multiple_heart_buttons() throws InterruptedException {
        maxHearts = random.nextInt(4) + 1;
        logger.info("Number of listings that will be favourited = " + maxHearts);
        for (int i = 0; i < maxHearts; i++) {
            roRezultatePage.pressHeartAt(i);
        }
        Thread.sleep(500);
    }

    @Then("the selected Heart buttons are filled")
    public void the_selected_heart_buttons_are_filled() {
        int c = 0;
        for (int i = 0; i < maxHearts; i++) {
            if (roRezultatePage.getHeartStateAt(i)) //returns true if Heart is pressed.
                c++;
        }
        Assert.assertEquals(c, maxHearts);
    }

    @Then("the Favourites button counter contains the number of selected items")
    public void the_favourites_button_counter_contains_the_number_of_selected_items() {
        System.out.println("Read attribute of pseudo-element to be implemented");
        //Assert.assertEquals(maxHearts,mainPage.getFavouritesCounterValue());
        /*Pseudo-elements are generated by CSS and are used to add styling or
        content before or after an element's actual content.
        They are not represented as separate elements in the DOM,
        so you cannot interact with them as you would with regular DOM elements.
         */
    }

    @When("the user clicks on the Favourites dropdown")
    public void the_user_clicks_on_the_favourites_dropdown() {
        mainPage.pressFavourites();
    }

    @When("the Anunturi counter contains the number of selected items")
    public void the_anunturi_counter_contains_the_number_of_selected_items() {
        Assert.assertEquals(mainPage.getAnunturiCounter(), maxHearts);
    }

    @When("the user clicks on the Anunturi button")
    public void the_user_clicks_on_the_anunturi_button() throws InterruptedException {
        mainPage.pressAnunturi();
        Thread.sleep(2000);
    }

    @Then("the Saved page appears")
    public void the_saved_page_appears() {
        Assert.assertEquals(driver.getTitle(),"Salvate");
    }

    @Then("the Anunturi tab counter contains the number of selected items")
    public void the_anunturi_tab_counter_contains_the_number_of_selected_items() {
        Assert.assertEquals(salvatAnunturiPage.getCounterFromAnunturiTab(),maxHearts);
    }

    @When("the user clicks the Heart button on all items")
    public void the_user_clicks_the_Heart_button_on_all_items() throws InterruptedException {
        for (int i = 0; i < maxHearts; i++) {
            salvatAnunturiPage.pressHeartAt(0);
            Thread.sleep(1000);
        }
    }

    @Then("the Anunturi tab is empty")
    public void the_anunturi_tab_is_empty() {
        int count = salvatAnunturiPage.getListCountFromSavedListings();
        logger.debug("Expecting 0 but found " + count + "listings.");
        Assert.assertEquals(0,count);
    }
}
